---
import { Prism } from "@astrojs/prism"

type Props = {
	code: string
	lang: string
}

const { code, lang } = Astro.props

const tooltip = /\n\/\/\sts-(error|info)\s\*\*([^*]*)\*\*\s([^\n]*)/g

const matches = [...code.matchAll(tooltip)]

let match = matches[0]

function makeid(length: number) {
	let result = ""
	const characters =
		"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
	const charactersLength = characters.length
	let counter = 0
	while (counter < length) {
		result += characters.charAt(Math.floor(Math.random() * charactersLength))
		counter += 1
	}
	return result
}

const id = makeid(10)

const matchType = match ? match[1] : null

const codeWithoutTooltips = code.replaceAll(tooltip, "")
---

<div id={id}>
	<Prism code={codeWithoutTooltips} lang={lang} />
	{match && <span class={`tooltip ${matchType}`}>{match[3]}</span>}
</div>

<style lang="scss" >
	.tooltip {
		position: relative;
		top: -30px;
		left: 1.5em;
		padding: 10px;
		font-size: 0.8em;
		box-decoration-break: clone;
		-webkit-box-decoration-break: clone;

		&.error {
			background-color: #a13a2f;
		}

		&.info {
			background-color: #2f5da1;
		}
	}
</style>

<script define:vars={{ id, matchType }}>
	const block = document.getElementById(id)

	if (block) {
		const matchRegex =
			/<span class="token comment">\/\*\*\/<\/span>(.*)<span class="token comment">\/\*\*\/<\/span>/g

		function replaceMatch(match) {
      const withoutPrefixComments = match.replaceAll("/**/", "")
			const withoutSpans = withoutPrefixComments
      .replace("</span>", "")
      .replace('<span class="token comment">', "")

			return `<span class='token-${matchType}'>${withoutSpans.trim()}</span>`
		}

		const replaced = block.innerHTML.replace(matchRegex, replaceMatch)
		block.innerHTML = replaced
	}
</script>
