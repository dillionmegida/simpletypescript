---
import BaseDocument from "../components/BaseDocument.astro"
import BreadCrumbs from "../components/BreadCrumbs.astro"
import { updateView } from "../helpers/views"
import type { Breadcrumb } from "../types/Breadcrumb"
import Layout from "./Layout.astro"

type Props = {
	title: string
	description: string
	cover?: string
	showCover?: boolean
	breadcrumbs: Breadcrumb[]
}

const {
	title,
	description,
	cover,
	breadcrumbs,
	showCover = false,
} = Astro.props

const path = Astro.url.pathname

const views = await updateView(path)
---

<BaseDocument image={cover} description={description} title={title}>
	<Layout>
		<main>
			<div class={`course-info ${cover && showCover && "has-cover"}`}>
				<div class="container padding">
					<BreadCrumbs paths={breadcrumbs} />
					<h1>{title}</h1>
					<p class="description">{description}</p>
					{views && <span>{views} views</span>}
					{
						cover && showCover && (
							<div class="course-cover">
								<img src={cover} alt="" />
							</div>
						)
					}
				</div>
			</div>
			<div class="container padding">
				{
					Astro.slots.has("content") && (
						<div class="content">
							<slot name="content" />
						</div>
					)
				}
				{Astro.slots.has("parent") && <slot name="parent" />}
				<br />
			</div>
			<footer class="text-center mt-20 text-white text-opacity-50 py-20">
				<a href="/" class="brand">simple:<span>typescript</span></a>
			</footer>
		</main>
	</Layout>
</BaseDocument>

<style is:global lang="scss">
	.course-info {
		position: relative;
		padding-top: 20px;

		&::after {
			content: "";
			z-index: -1;
			position: absolute;
			inset: 0;
			background-color: color-mix(in srgb, var(--main-color), white 5%);
		}

		.description {
			font-size: 1.4em;
		}

		&.has-cover::after {
			height: 70%;
		}
	}

	h1 {
		font-family: var(--heading-font);
		line-height: 1.1;
	}

	main {
		line-height: 1.4;
	}

	nav {
		// padding: 20px;
	}

	.course-cover {
		margin: 30px 0 0;
		border: 4px solid var(--white-100);
		aspect-ratio: 16 / 9;
		width: 100%;
	}

	h2 {
		margin: 40px 0 10px;
	}

	hr {
		border-color: var(--white-200);
		margin: 50px 0;
		width: 40%;
	}

	.content {
		margin: 0 auto 50px;
		padding: 0 0 50px;
		font-size: clamp(1rem, 7vw, 1.4rem);

		ul {
			padding-left: 20px;
			list-style-type: disc;
		}

		blockquote {
			color: color-mix(in srgb, var(--text-color), var(--main-color) 20%);
			padding: 10px 20px;
			border-left: 5px solid
				color-mix(in srgb, var(--text-color), var(--main-color) 80%);

			& > * {
				margin: 0;
			}
		}

		a {
			transition: 300ms;
			color: var(--green);

			&:hover {
				text-decoration: underline;
			}
		}
	}

	pre[class] {
		margin: 20px 0;
		border: 4px solid var(--white-100);
	}

	p {
		margin: 1em 0;
		line-height: 1.5;
	}

	code:not([class]) {
		background-color: color-mix(
			in srgb,
			var(--main-color),
			var(--text-color) 30%
		);
		padding: 3px;
		font-size: 0.9em;
	}
</style>
